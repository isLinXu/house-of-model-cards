SwinModel(
  (embeddings): SwinEmbeddings(
    (patch_embeddings): SwinPatchEmbeddings(
      (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
    )
    (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
    (dropout): Dropout(p=0.0, inplace=False)
  )
  (encoder): SwinEncoder(
    (layers): ModuleList(
      (0): SwinStage(
        (blocks): ModuleList(
          (0-1): 2 x SwinLayer(
            (layernorm_before): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
            (attention): SwinAttention(
              (self): SwinSelfAttention(
                (query): Linear(in_features=96, out_features=96, bias=True)
                (key): Linear(in_features=96, out_features=96, bias=True)
                (value): Linear(in_features=96, out_features=96, bias=True)
                (dropout): Dropout(p=0.0, inplace=False)
              )
              (output): SwinSelfOutput(
                (dense): Linear(in_features=96, out_features=96, bias=True)
                (dropout): Dropout(p=0.0, inplace=False)
              )
            )
            (drop_path): SwinDropPath(p=0.1)
            (layernorm_after): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
            (intermediate): SwinIntermediate(
              (dense): Linear(in_features=96, out_features=384, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): SwinOutput(
              (dense): Linear(in_features=384, out_features=96, bias=True)
              (dropout): Dropout(p=0.0, inplace=False)
            )
          )
        )
        (downsample): SwinPatchMerging(
          (reduction): Linear(in_features=384, out_features=192, bias=False)
          (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        )
      )
      (1): SwinStage(
        (blocks): ModuleList(
          (0-1): 2 x SwinLayer(
            (layernorm_before): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
            (attention): SwinAttention(
              (self): SwinSelfAttention(
                (query): Linear(in_features=192, out_features=192, bias=True)
                (key): Linear(in_features=192, out_features=192, bias=True)
                (value): Linear(in_features=192, out_features=192, bias=True)
                (dropout): Dropout(p=0.0, inplace=False)
              )
              (output): SwinSelfOutput(
                (dense): Linear(in_features=192, out_features=192, bias=True)
                (dropout): Dropout(p=0.0, inplace=False)
              )
            )
            (drop_path): SwinDropPath(p=0.1)
            (layernorm_after): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
            (intermediate): SwinIntermediate(
              (dense): Linear(in_features=192, out_features=768, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): SwinOutput(
              (dense): Linear(in_features=768, out_features=192, bias=True)
              (dropout): Dropout(p=0.0, inplace=False)
            )
          )
        )
        (downsample): SwinPatchMerging(
          (reduction): Linear(in_features=768, out_features=384, bias=False)
          (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        )
      )
      (2): SwinStage(
        (blocks): ModuleList(
          (0-5): 6 x SwinLayer(
            (layernorm_before): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
            (attention): SwinAttention(
              (self): SwinSelfAttention(
                (query): Linear(in_features=384, out_features=384, bias=True)
                (key): Linear(in_features=384, out_features=384, bias=True)
                (value): Linear(in_features=384, out_features=384, bias=True)
                (dropout): Dropout(p=0.0, inplace=False)
              )
              (output): SwinSelfOutput(
                (dense): Linear(in_features=384, out_features=384, bias=True)
                (dropout): Dropout(p=0.0, inplace=False)
              )
            )
            (drop_path): SwinDropPath(p=0.1)
            (layernorm_after): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
            (intermediate): SwinIntermediate(
              (dense): Linear(in_features=384, out_features=1536, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): SwinOutput(
              (dense): Linear(in_features=1536, out_features=384, bias=True)
              (dropout): Dropout(p=0.0, inplace=False)
            )
          )
        )
        (downsample): SwinPatchMerging(
          (reduction): Linear(in_features=1536, out_features=768, bias=False)
          (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        )
      )
      (3): SwinStage(
        (blocks): ModuleList(
          (0-1): 2 x SwinLayer(
            (layernorm_before): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attention): SwinAttention(
              (self): SwinSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.0, inplace=False)
              )
              (output): SwinSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.0, inplace=False)
              )
            )
            (drop_path): SwinDropPath(p=0.1)
            (layernorm_after): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (intermediate): SwinIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): SwinOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (dropout): Dropout(p=0.0, inplace=False)
            )
          )
        )
      )
    )
  )
  (layernorm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
  (pooler): AdaptiveAvgPool1d(output_size=1)
)
