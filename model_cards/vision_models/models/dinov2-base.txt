DPTForDepthEstimation(
  (backbone): Dinov2Backbone(
    (embeddings): Dinov2Embeddings(
      (patch_embeddings): Dinov2PatchEmbeddings(
        (projection): Conv2d(3, 768, kernel_size=(14, 14), stride=(14, 14))
      )
      (dropout): Dropout(p=0.0, inplace=False)
    )
    (encoder): Dinov2Encoder(
      (layer): ModuleList(
        (0-11): 12 x Dinov2Layer(
          (norm1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (attention): Dinov2Attention(
            (attention): Dinov2SelfAttention(
              (query): Linear(in_features=768, out_features=768, bias=True)
              (key): Linear(in_features=768, out_features=768, bias=True)
              (value): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.0, inplace=False)
            )
            (output): Dinov2SelfOutput(
              (dense): Linear(in_features=768, out_features=768, bias=True)
              (dropout): Dropout(p=0.0, inplace=False)
            )
          )
          (layer_scale1): Dinov2LayerScale()
          (drop_path): Identity()
          (norm2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
          (mlp): Dinov2MLP(
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (activation): GELUActivation()
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
          )
          (layer_scale2): Dinov2LayerScale()
        )
      )
    )
    (layernorm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
  )
  (neck): DPTNeck(
    (reassemble_stage): DPTReassembleStage(
      (layers): ModuleList(
        (0): DPTReassembleLayer(
          (projection): Conv2d(768, 96, kernel_size=(1, 1), stride=(1, 1))
          (resize): ConvTranspose2d(96, 96, kernel_size=(4, 4), stride=(4, 4))
        )
        (1): DPTReassembleLayer(
          (projection): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1))
          (resize): ConvTranspose2d(192, 192, kernel_size=(2, 2), stride=(2, 2))
        )
        (2): DPTReassembleLayer(
          (projection): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1))
          (resize): Identity()
        )
        (3): DPTReassembleLayer(
          (projection): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (resize): Conv2d(768, 768, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        )
      )
      (readout_projects): ModuleList(
        (0-3): 4 x Sequential(
          (0): Linear(in_features=1536, out_features=768, bias=True)
          (1): GELUActivation()
        )
      )
    )
    (convs): ModuleList(
      (0): Conv2d(96, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): Conv2d(192, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (2): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (3): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    )
    (fusion_stage): DPTFeatureFusionStage(
      (layers): ModuleList(
        (0-3): 4 x DPTFeatureFusionLayer(
          (projection): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (residual_layer1): DPTPreActResidualLayer(
            (activation1): ReLU()
            (convolution1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activation2): ReLU()
            (convolution2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (residual_layer2): DPTPreActResidualLayer(
            (activation1): ReLU()
            (convolution1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (activation2): ReLU()
            (convolution2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
      )
    )
  )
  (head): DPTDepthEstimationHead(
    (head): Sequential(
      (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Upsample(scale_factor=2.0, mode='bilinear')
      (2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
      (5): ReLU()
    )
  )
)
